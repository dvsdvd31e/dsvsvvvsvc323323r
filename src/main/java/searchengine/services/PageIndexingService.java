package searchengine.services;

import org.jsoup.Jsoup;
import org.jsoup.nodes.Document;
import org.jsoup.select.Elements;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import searchengine.model.Lemma;
import searchengine.model.Index;
import java.util.Map;
import java.util.HashMap;
import java.util.List;
import java.util.HashSet;

import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import searchengine.config.SitesList;
import searchengine.config.ConfigSite;
import searchengine.model.Page;
import searchengine.model.Site;
import searchengine.model.IndexingStatus;
import searchengine.repository.IndexRepository;
import searchengine.repository.LemmaRepository;
import searchengine.repository.PageRepository;
import searchengine.repository.SiteRepository;
import java.io.IOException;
import java.time.LocalDateTime;

import java.util.ArrayList;
import org.apache.lucene.morphology.LuceneMorphology;
import org.apache.lucene.morphology.russian.RussianLuceneMorphology;
import org.apache.lucene.morphology.english.EnglishLuceneMorphology;

import java.util.Set;
import java.util.concurrent.ConcurrentSkipListSet;
import java.util.concurrent.ForkJoinPool;
import java.util.concurrent.RecursiveTask;

@Service
public class PageIndexingService {
    private static final Logger logger = LoggerFactory.getLogger(PageIndexingService.class);

    private final PageRepository pageRepository;
    private final SiteRepository siteRepository;
    private final SitesList sitesList;
    private final LemmaRepository lemmaRepository;
    private final IndexRepository indexRepository;
    private LuceneMorphology russianMorphology;
    private LuceneMorphology englishMorphology;
    private final Set<String> visitedPages = new ConcurrentSkipListSet<>();

    public PageIndexingService(PageRepository pageRepository,LemmaRepository lemmaRepository,IndexRepository indexRepository, SiteRepository siteRepository, SitesList sitesList) {
        this.pageRepository = pageRepository;
        this.siteRepository = siteRepository;
        this.sitesList = sitesList;
        this.indexRepository = indexRepository;
        this.lemmaRepository = lemmaRepository;

        try {
            this.russianMorphology = new RussianLuceneMorphology();
            this.englishMorphology = new EnglishLuceneMorphology();
        } catch (IOException e) {
            throw new RuntimeException("–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –º–æ—Ä—Ñ–æ–ª–æ–≥–∏–∏", e);
        }
    }


    @Transactional
    public void processPageContent(Page page) {
        String text = extractTextFromHtml(page.getContent());
        Map<String, Integer> lemmas = lemmatizeText(text);

        Set<String> processedLemmas = new HashSet<>();
        List<Lemma> lemmasToSave = new ArrayList<>();
        List<Index> indexesToSave = new ArrayList<>();

        for (Map.Entry<String, Integer> entry : lemmas.entrySet()) {
            String lemmaText = entry.getKey();
            int count = entry.getValue();

            // –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –ª–µ–º–º—ã
            logger.info("üî§ –ù–∞–π–¥–µ–Ω–∞ –ª–µ–º–º–∞: '{}', —á–∞—Å—Ç–æ—Ç–∞: {}", lemmaText, count);

            // –ò—â–µ–º –ª–µ–º–º—É –≤ –±–∞–∑–µ
            List<Lemma> foundLemmas = lemmaRepository.findByLemma(lemmaText);
            Lemma lemma;

            if (foundLemmas.isEmpty()) {
                // –ï—Å–ª–∏ –ª–µ–º–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é
                lemma = new Lemma(  null, page.getSite(), lemmaText, 0);
            } else {
                // –ï—Å–ª–∏ –ª–µ–º–º–∞ –Ω–∞–π–¥–µ–Ω–∞, –±–µ—Ä–µ–º –ø–µ—Ä–≤—É—é –∏–∑ —Å–ø–∏—Å–∫–∞
                lemma = foundLemmas.get(0);
            }

            // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º frequency —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–∞ –ª–µ–º–º–∞ –≤–ø–µ—Ä–≤—ã–µ –≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
            if (!processedLemmas.contains(lemmaText)) {
                lemma.setFrequency(lemma.getFrequency() + 1);
                processedLemmas.add(lemmaText);
            }

            lemmasToSave.add(lemma);

            // –°–æ–∑–¥–∞–µ–º —Å–≤—è–∑—å –ª–µ–º–º—ã —Å —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ–π
            Index index = new Index(null, page, lemma, (float) count);
            indexesToSave.add(index);
        }

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∑–∞ 2 –∑–∞–ø—Ä–æ—Å–∞
        lemmaRepository.saveAll(lemmasToSave);
        indexRepository.saveAll(indexesToSave);
    }

    // üîπ –ú–µ—Ç–æ–¥ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —á–∏—Å—Ç–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –∏–∑ HTML
    private String extractTextFromHtml(String html) {
        return Jsoup.parse(html).text();
    }

    // üîπ –ú–µ—Ç–æ–¥ –¥–ª—è –ª–µ–º–º–∞—Ç–∏–∑–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞
    private Map<String, Integer> lemmatizeText(String text) {
        Map<String, Integer> lemmas = new HashMap<>();
        String[] words = text.toLowerCase().replaceAll("[^–∞-—èa-z\\s]", "").split("\\s+");

        for (String word : words) {
            if (word.length() < 3) continue; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ—Ä–æ—Ç–∫–∏–µ —Å–ª–æ–≤–∞

            List<String> normalForms;
            if (word.matches("[–∞-—è]+")) {
                normalForms = russianMorphology.getNormalForms(word);
            } else if (word.matches("[a-z]+")) {
                normalForms = englishMorphology.getNormalForms(word);
            } else {
                continue;
            }

            for (String lemma : normalForms) {
                lemmas.put(lemma, lemmas.getOrDefault(lemma, 0) + 1);
            }
        }
        return lemmas;
    }

    public boolean indexPage(String baseUrl) {
        long startTime = System.currentTimeMillis();
        Site site = null;

        try {
            // –ü–æ–ª—É—á–∞–µ–º —Å–∞–π—Ç –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            ConfigSite configSite = getConfigSiteByUrl(baseUrl);
            if (configSite == null) {
                logger.warn("‚ö†Ô∏è –°–∞–π—Ç {} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏!", baseUrl);
                return false;
            }

            // –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö –æ —Å–∞–π—Ç–µ –ø–µ—Ä–µ–¥ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–µ–π
            IndexingService.deleteSiteData(baseUrl, siteRepository, indexRepository, lemmaRepository, pageRepository);

            // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –æ —Å–∞–π—Ç–µ
            site = new Site();
            site.setUrl(baseUrl);
            site.setName(configSite.getName());
            site.setStatus(IndexingStatus.INDEXING);
            site.setStatusTime(LocalDateTime.now());
            site = siteRepository.saveAndFlush(site);

            logger.info("üîÑ –ù–∞—á–∏–Ω–∞–µ–º –∏–Ω–¥–µ–∫—Å–∞—Ü–∏—é —Å–∞–π—Ç–∞: {}", baseUrl);
            ForkJoinPool forkJoinPool = new ForkJoinPool();
            forkJoinPool.invoke(new CrawlerIndex(site, baseUrl));

            // üîπ –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –º–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ INDEXED
            site.setStatus(IndexingStatus.INDEXED);
            site.setStatusTime(LocalDateTime.now());
            site.setLastError(null);
            siteRepository.save(site);

            long endTime = System.currentTimeMillis();
            logger.info("‚úÖ –ò–Ω–¥–µ–∫—Å–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ {} —Å–µ–∫. –°–∞–π—Ç –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ INDEXED.", (endTime - startTime) / 1000);
            return true;
        } catch (Exception e) {
            logger.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏ —Å–∞–π—Ç–∞ {}: {}", baseUrl, e.getMessage(), e);

            if (site != null) {
                site.setStatus(IndexingStatus.FAILED);
                site.setStatusTime(LocalDateTime.now());
                site.setLastError("–û—à–∏–±–∫–∞ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏: " + e.getMessage());
                siteRepository.save(site);
            }

            return false;
        }
    }

    private ConfigSite getConfigSiteByUrl(String url) {
        return sitesList.getSites().stream()
                .filter(site -> site.getUrl().equalsIgnoreCase(url))
                .findFirst()
                .orElse(null);
    }

    // üîπ –ö–ª–∞—Å—Å –¥–ª—è –æ–±—Ö–æ–¥–∞ —Å—Ç—Ä–∞–Ω–∏—Ü —Å–∞–π—Ç–∞
    private class  CrawlerIndex extends RecursiveTask<Void> {
        private final Site site;
        private final String url;

        public CrawlerIndex(Site site, String url) {
            this.site = site;
            this.url = url;
        }

        @Override
        protected Void compute() {
            if (!visitedPages.add(url) || shouldSkipUrl(url) || pageRepository.existsByPath(url.replace(site.getUrl(), ""))) {
                return null;
            }

            long startTime = System.currentTimeMillis();

            try {
                long delay = 500 + (long) (Math.random() * 4500);
                Thread.sleep(delay);

                site.setStatusTime(LocalDateTime.now());
                siteRepository.save(site);

                logger.info("üåç –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É: {}", url);

                Document document = Jsoup.connect(url)
                        .userAgent("Mozilla/5.0")
                        .referrer("http://www.google.com")
                        .ignoreContentType(true)  // –ü–æ–∑–≤–æ–ª—è–µ—Ç –∑–∞–≥—Ä—É–∂–∞—Ç—å —Ñ–∞–π–ª—ã, –∞ –Ω–µ —Ç–æ–ª—å–∫–æ HTML
                        .get();

                String contentType = document.connection().response().contentType();
                int responseCode = document.connection().response().statusCode();

                Page page = new Page();
                page.setPath(url.replace(site.getUrl(), ""));
                page.setSite(site);
                page.setCode(responseCode);

                if (contentType.startsWith("text/html")) {
                    page.setContent(document.html());
                    indexFilesAndImages(document);
                } else if (contentType.startsWith("image/") || contentType.startsWith("application/")) {
                    page.setContent("FILE: " + url); // –î–ª—è —Ñ–∞–π–ª–æ–≤ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É
                }

                pageRepository.save(page);

                // üîπ –í—ã–∑—ã–≤–∞–µ–º –º–µ—Ç–æ–¥ –ª–µ–º–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                processPageContent(page);

                long endTime = System.currentTimeMillis();
                logger.info("‚úÖ [{}] –ü—Ä–æ–∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω–æ –∑–∞ {} –º—Å: {}", responseCode, (endTime - startTime), url);

                Elements links = document.select("a[href]");
                List<CrawlerIndex> subTasks = links.stream()
                        .map(link -> cleanUrl(link.absUrl("href")))
                        .filter(link -> link.startsWith(site.getUrl()) && !shouldSkipUrl(link))
                        .map(link -> new CrawlerIndex(site, link))
                        .toList();

                logger.info("üîó –ù–∞–π–¥–µ–Ω–æ —Å—Å—ã–ª–æ–∫: {}", subTasks.size());
                invokeAll(subTasks);

            } catch (IOException e) {
                handleException("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ", e);
            } catch (InterruptedException e) {
                Thread.currentThread().interrupt();
                handleException("‚è≥ –ü–æ—Ç–æ–∫ –ø—Ä–µ—Ä–≤–∞–Ω", e);
            }

            return null;
        }

        private void indexFilesAndImages(Document document) {
            Elements images = document.select("img[src]");
            Elements files = document.select("a[href]");

            for (var img : images) {
                String imgUrl = cleanUrl(img.absUrl("src"));
                saveMedia(imgUrl, "image");
            }

            for (var file : files) {
                String fileUrl = cleanUrl(file.absUrl("href"));
                if (fileUrl.matches(".*\\.(pdf|docx|xlsx|zip|rar)$")) {
                    saveMedia(fileUrl, "file");
                }
            }
        }

        private void saveMedia(String url, String type) {
            Page mediaPage = new Page();
            mediaPage.setPath(url.replace(site.getUrl(), ""));
            mediaPage.setSite(site);
            mediaPage.setCode(200);
            mediaPage.setContent(type.toUpperCase() + ": " + url);
            pageRepository.save(mediaPage);

            logger.info("üìÇ –î–æ–±–∞–≤–ª–µ–Ω {}: {}", type, url);
        }

        private void handleException(String message, Exception e) {
            logger.error("{} {}: {}", message, url, e.getMessage(), e);
            site.setStatus(IndexingStatus.FAILED);
            site.setStatusTime(LocalDateTime.now());
            site.setLastError(message + " " + url + ": " + e.getMessage());
            siteRepository.save(site);
        }

        private String cleanUrl(String url) {
            return url.replaceAll("#.*", "").replaceAll("\\?.*", "");
        }

        private boolean shouldSkipUrl(String url) {
            return url.contains("/basket") || url.contains("/cart") || url.contains("/checkout");
        }
    }


}